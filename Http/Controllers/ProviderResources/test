$Payment->provider_id=$UserRequest->provider_id;
            $Payment->fleet_id=$UserRequest->provider->fleet;

            /*
            * Reported by Jeya, We are adding the surge price with Base price of Service Type.
            */ 
            $Payment->fixed = $Fixed + $Surge;
            $Payment->distance = $Distance_fare;
            $Payment->minute  = $Minute_fare;
            $Payment->hour  = $Hour_fare;
            $Payment->commision = $Commision;
            $Payment->commision_per = $commission_percentage;           
            $Payment->surge = $Surge;
            $Payment->total = $Total;
            $Payment->provider_commission = $ProviderCommission;
            $Payment->provider_pay = $ProviderPay;
            if($UserRequest->promocode_id>0){
                $Payment->promocode_id = $UserRequest->promocode_id;
            }
            $Payment->discount = $Discount;
            $Payment->discount_per = $discount_per;

            if($Discount  == ($Distance + $Tax)){
                $UserRequest->paid = 1;
            }

            if($UserRequest->use_wallet == 1 && $payable_amount > 0){

                $User = User::find($UserRequest->user_id);

                $Wallet = $User->wallet_balance;

                if($Wallet != 0){

                    if($payable_amount > $Wallet) {

                        $Payment->wallet = $Wallet;
                        $Payment->is_partial=1;
                        $Payable = $payable_amount - $Wallet;
                        
                        $Payment->payable = abs($Payable);

                        $wallet_det=$Wallet;                      

                    } else {

                        $Payment->payable = 0;
                        $WalletBalance = $Wallet - $payable_amount;
                        
                        $Payment->wallet = $payable_amount;
                        
                        $Payment->payment_id = 'WALLET';
                        $Payment->payment_mode = $UserRequest->payment_mode;

                        $UserRequest->paid = 1;
                        $UserRequest->status = 'COMPLETED';
                        $UserRequest->save();

                        $wallet_det=$payable_amount;
                       
                    }

                    // charged wallet money push 
                    (new SendPushNotification)->ChargedWalletMoney($UserRequest->user_id,currency($wallet_det));

                    //for create the user wallet transaction
                    $this->userCreditDebit($wallet_det,$UserRequest,0);

                }

            } else {
                $Payment->total = abs($Total);
                $Payment->payable = abs($payable_amount);
                
            }

            $Payment->tax = $Tax;
            $Payment->tax_per = $tax_percentage;
            $Payment->save();  

            if($Payment)
            { 

                $Payment_pdf = UserRequestPayment::with('request.provider','request.provider_service','request.service_type')->findOrFail($Payment->id);

                $pdf = \PDF::loadView('invoice_pdf', compact('Payment_pdf'));
               
                $booking_id =$Payment_pdf->request->booking_id.'.pdf';
                $pdf->save('storage/invoice/invoice'.$booking_id);  
                $Payment_pdf->pdf_link = 'storage/invoice/invoice'.$booking_id;
                $Payment_pdf->save();  
                $Payment = $Payment_pdf;
            }



            return $Payment;

        } catch (ModelNotFoundException $e) {
            return false;
        }
    }



    /**
     * Get the trip history details of the provider
     *
     * @return \Illuminate\Http\Response
     */
    public function history_details(Request $request)
    {
        $this->validate($request, [
                'request_id' => 'required|integer|exists:user_requests,id',
            ]);

        if($request->ajax()) {
            
            $Jobs = UserRequests::where('id',$request->request_id)
                                ->where('provider_id', Auth::user()->id)
                                ->with('payment','service_type','user','rating')
                                ->get();
            if(!empty($Jobs)){
                $map_icon_start = asset('asset/img/marker-start.png');
                $map_icon_end = asset('asset/img/marker-end.png');
                foreach ($Jobs as $key => $value) {
                    $Jobs[$key]->static_map = "https://maps.googleapis.com/maps/api/staticmap?".
                            "autoscale=1".
                            "&size=600x300".
                            "&maptype=terrian".
                            "&format=png".
                            "&visual_refresh=true".
                            "&markers=icon:".$map_icon_start."%7C".$value->s_latitude.",".$value->s_longitude.
                            "&markers=icon:".$map_icon_end."%7C".$value->d_latitude.",".$value->d_longitude.
                            "&path=color:0x000000|weight:3|enc:".$value->route_key.
                            "&key=".Setting::get('map_key');
                }
            }

            return $Jobs[0];
        }

    }

    /**
     * Show the application dashboard.
     *
     * @return \Illuminate\Http\Response
     */

    public function upcoming_trips() {
        log::info("Trip Controller upcoming_trips()");

    
        try{
            $UserRequests = UserRequests::ProviderUpcomingRequest(Auth::user()->id)->get();
            log::info("UserRequests");
            log::info($UserRequests);
            if(!empty($UserRequests)){
                $map_icon = asset('asset/marker.png');
                foreach ($UserRequests as $key => $value) {
                    $UserRequests[$key]->static_map = "https://maps.googleapis.com/maps/api/staticmap?".
                                    "autoscale=1".
                                    "&size=320x130".
                                    "&maptype=terrian".
                                    "&format=png".
                                    "&visual_refresh=true".
                                    "&markers=icon:".$map_icon."%7C".$value->s_latitude.",".$value->s_longitude.
                                    "&markers=icon:".$map_icon."%7C".$value->d_latitude.",".$value->d_longitude.
                                    "&path=color:0x000000|weight:3|enc:".$value->route_key.
                                    "&key=".Setting::get('map_key');
                }
            }
            log::info("return UserRequests");
            log::info($UserRequests);
            return $UserRequests;
        }

        catch (Exception $e) {
            return response()->json(['error' => trans('api.something_went_wrong')]);
        }
    }

    /**
     * Get the trip history details of the provider
     *
     * @return \Illuminate\Http\Response
     */
    public function upcoming_details(Request $request)
    {
        $this->validate($request, [
                'request_id' => 'required|integer|exists:user_requests,id',
            ]);

        if($request->ajax()) {
            
            $Jobs = UserRequests::where('id',$request->request_id)
                                ->where('provider_id', Auth::user()->id)
                                ->with('service_type','user','payment')
                                ->get();
            if(!empty($Jobs)){
                $map_icon_start = asset('asset/img/marker-start.png');
                $map_icon_end = asset('asset/img/marker-end.png');
                foreach ($Jobs as $key => $value) {
                    $Jobs[$key]->static_map = "https://maps.googleapis.com/maps/api/staticmap?".
                            "autoscale=1".
                            "&size=600x300".
                            "&maptype=terrian".
                            "&format=png".
                            "&visual_refresh=true".
                            "&markers=icon:".$map_icon_start."%7C".$value->s_latitude.",".$value->s_longitude.
                            "&markers=icon:".$map_icon_end."%7C".$value->d_latitude.",".$value->d_longitude.
                            "&path=color:0x000000|weight:3|enc:".$value->route_key.
                            "&key=".Setting::get('map_key');
                }
            }

            return $Jobs[0];
        }

    }

    /**
     * Get the trip history details of the provider
     *
     * @return \Illuminate\Http\Response
     */
    public function summary(Request $request)
    {
        try{
            if($request->ajax()) {
                
                $rides = UserRequests::where('provider_id', Auth::user()->id)->count();

                /*$revenue_total = UserRequestPayment::whereHas('request', function($query) use ($request) {
                                $query->where('provider_id', Auth::user()->id);
                            })
                        ->sum('total');
                 $revenue_commission = UserRequestPayment::whereHas('request', function($query) use ($request) {
                                $query->where('provider_id', Auth::user()->id);
                            })
                        ->sum('provider_commission');  

                 $revenue =  $revenue_total - $revenue_commission;*/

                $revenue = UserRequestPayment::where('provider_id', Auth::user()->id)->sum('provider_pay');

                $cancel_rides = UserRequests::where('status','CANCELLED')->where('provider_id', Auth::user()->id)->count();
                $scheduled_rides = UserRequests::where('status','SCHEDULED')->where('provider_id', Auth::user()->id)->count();

                return response()->json([
                    'rides' => $rides, 
                    'revenue' => $revenue,
                    'cancel_rides' => $cancel_rides,
                    'scheduled_rides' => $scheduled_rides,
                ]);
            }

        } catch (Exception $e) {
            return response()->json(['error' => trans('api.something_went_wrong')]);
        }

    }


    /**
     * help Details.
     *
     * @return \Illuminate\Http\Response
     */

    public function help_details(Request $request){

        try{

            if($request->ajax()) {
                return response()->json([
                    'contact_number' => Setting::get('contact_number',''), 
                    'contact_email' => Setting::get('contact_email','')
                     ]);
            }

        }catch (Exception $e) {
            if($request->ajax()) {
                return response()->json(['error' => trans('api.something_went_wrong')]);
            }
        }
    }


    /*
        check the payment status is completed or not
        if its completed check the below logics
        Check the request table if user have any commission
        check the request table if provider have any fleet
        check the user, applied any discount
        check the payment mode is cash, card, wallet, partial
        check whether provider have any negative balance 
    */ 
    public function callTransaction($request_id){  

        $UserRequest = UserRequests::with('provider')->with('payment')->findOrFail($request_id);

        if($UserRequest->paid==1){

            if(Setting::get('send_email', 0) == 1) {
                Helper::site_sendmail($UserRequest);
            }    

            $paymentsRequest = UserRequestPayment::where('request_id',$request_id)->first();

            $provider = Provider::where('id',$paymentsRequest->provider_id)->first();

            $fleet_amount=$discount=$admin_commision=$credit_amount=$balance_provider_credit=$provider_credit=0;                

            if($paymentsRequest->is_partial==1){
                //partial payment
                if($paymentsRequest->payment_mode=="CASH"){
                    $credit_amount=$paymentsRequest->wallet + $paymentsRequest->tips;
                }elseif($paymentsRequest->payment_mode=="Korttimaksu"){
                    $credit_amount=$paymentsRequest->wallet + $paymentsRequest->tips;
                }elseif($paymentsRequest->payment_mode=="Lasku"){
                    $credit_amount=$paymentsRequest->wallet + $paymentsRequest->tips;
                }elseif($paymentsRequest->payment_mode=="MobilePay"){
                    $credit_amount=$paymentsRequest->wallet + $paymentsRequest->tips;
                }
                else{
                    $credit_amount=$paymentsRequest->total + $paymentsRequest->tips;
                }
            }
            else{
                \Log::info($paymentsRequest->payment_id);
                \Log::info($paymentsRequest->payment_mode);
                if($paymentsRequest->payment_mode=="CARD" || $paymentsRequest->payment_id=="WALLET"){
                    $credit_amount=$paymentsRequest->total + $paymentsRequest->tips;
                    \Log::info("call Transcation wallet: ".$credit_amount." request_id ".$request_id);
                }
                else{
                    \Log::info("Else call Transcation".$request_id);
                    $credit_amount=0;
                }    
            }                
            

            //admin,fleet,provider calculations
            if(!empty($paymentsRequest->commision_per)){

                $admin_commision=$paymentsRequest->commision;

                if(!empty($paymentsRequest->fleet_id)){
                    //get the percentage of fleet owners
                    $fleet = Fleet::where('id',$paymentsRequest->fleet_id)->first();
                    $fleet_per=$fleet->commission;
                    $fleet_amount=($admin_commision) * ( $fleet_per/100 );
                    $admin_commision=$admin_commision;

                }
                
                //check the user applied discount
                if(!empty($paymentsRequest->discount)){
                    $balance_provider_credit=$paymentsRequest->discount;
                }  

            }
            else{

                if(!empty($paymentsRequest->fleet_id)){
                    $fleet_per=(int)Setting::get('fleet_commission_percentage');
                    $fleet_amount=($paymentsRequest->total) * ( $fleet_per/100 );
                    $admin_commision=$fleet_amount;
                }
                if(!empty($paymentsRequest->discount)){
                    $balance_provider_credit=$paymentsRequest->discount;
                }    
            }                

            if(!empty($admin_commision)){
                //add the commission amount to admin wallet and debit amount to provider wallet, update the provider wallet amount to provider table
               $this->adminCommission($admin_commision,$paymentsRequest,$UserRequest);
            }

            if(!empty($paymentsRequest->fleet_id) && !empty($fleet_amount)){
                $paymentsRequest->fleet=$fleet_amount;
                $paymentsRequest->fleet_per=$fleet_per;
                $paymentsRequest->save();
                //create the amount to fleet account and deduct the amount to admin wallet, update the fleet wallet amount to fleet table
                $this->fleetCommission($fleet_amount,$paymentsRequest,$UserRequest);                        
            }
            if(!empty($balance_provider_credit)){
                //debit the amount to admin wallet and add the amount to provider wallet, update the provider wallet amount to provider table
                $this->providerDiscountCredit($balance_provider_credit,$paymentsRequest,$UserRequest);
            }

            if(!empty($paymentsRequest->tax)){
                //debit the amount to admin wallet and add the amount to provider wallet, update the provider wallet amount to provider table
                $this->taxCredit($paymentsRequest->tax,$paymentsRequest,$UserRequest);
            }  
            
            if($credit_amount>0){               
                //provider ride amount
                //check whether provider have any negative wallet balance if its deduct the amount from its credit.
                //if its negative wallet balance grater of its credit amount then deduct credit-wallet balance and update the negative amount to admin wallet
                if($provider->wallet_balance>0){
                    $admin_amount=$credit_amount-$admin_commision-$paymentsRequest->tax;
                }
                else{
                    $admin_amount=$credit_amount-$admin_commision+($provider->wallet_balance)-$paymentsRequest->tax;
                }

                $this->providerRideCredit($credit_amount,$admin_amount,$paymentsRequest,$UserRequest);
            }
            
            return true;
        }
        else{
            return true;
        }
        
    }
    
    public function createAdminWallet($request){

        $admin_data=AdminWallet::orderBy('id', 'DESC')->first();

        $adminwallet=new AdminWallet;
        $adminwallet->transaction_id=$request['transaction_id'];        
        $adminwallet->transaction_alias=$request['transaction_alias'];
        $adminwallet->transaction_desc=$request['transaction_desc'];
        $adminwallet->transaction_type=$request['transaction_type'];
        $adminwallet->type=$request['type'];
        $adminwallet->amount=$request['amount'];

        if(empty($admin_data->close_balance))
            $adminwallet->open_balance=0;
        else
            $adminwallet->open_balance=$admin_data->close_balance;

        if(empty($admin_data->close_balance))
            $adminwallet->close_balance=$request['amount'];
        else            
            $adminwallet->close_balance=$admin_data->close_balance+($request['amount']);        

        $adminwallet->save();

        return true;
    }

    protected function createUserWallet($request){
        
        $user=User::findOrFail($request['id']);

        $userWallet=new UserWallet;
        $userWallet->user_id=$request['id']; 
        $userWallet->transaction_id=$request['transaction_id'];        
        $userWallet->transaction_alias=$request['transaction_alias'];
        $userWallet->transaction_desc=$request['transaction_desc'];
        $userWallet->type=$request['type'];
        $userWallet->amount=$request['amount'];        

        if(empty($user->wallet_balance))
            $userWallet->open_balance=0;
        else
            $userWallet->open_balance=$user->wallet_balance;

        if(empty($user->wallet_balance))
            $userWallet->close_balance=$request['amount'];
        else            
            $userWallet->close_balance=$user->wallet_balance+($request['amount']);

        $userWallet->save();

        //update the user wallet amount to user table        
        $user->wallet_balance=$user->wallet_balance+($request['amount']);
        $user->save();

        return true;
    }

    public function createProviderWallet($request){
        
        $provider=Provider::findOrFail($request['id']);

        $providerWallet=new ProviderWallet;        
        $providerWallet->provider_id=$request['id'];        
        $providerWallet->transaction_id=$request['transaction_id'];        
        $providerWallet->transaction_alias=$request['transaction_alias'];
        $providerWallet->transaction_desc=$request['transaction_desc'];
        $providerWallet->type=$request['type'];
        $providerWallet->amount=$request['amount'];

        if(empty($provider->wallet_balance))
            $providerWallet->open_balance=0;
        else
            $providerWallet->open_balance=$provider->wallet_balance;

        if(empty($provider->wallet_balance))
            $providerWallet->close_balance=$request['amount'];
        else            
            $providerWallet->close_balance=$provider->wallet_balance+($request['amount']);        

        $providerWallet->save();

        //update the provider wallet amount to provider table        
        $provider->wallet_balance=$provider->wallet_balance+($request['amount']);
        $provider->save();

        return true;

    }

    protected function createFleetWallet($request){

        $fleet=Fleet::findOrFail($request['id']);

        $fleetWallet=new FleetWallet;
        $fleetWallet->fleet_id=$request['id'];
        $fleetWallet->transaction_id=$request['transaction_id'];        
        $fleetWallet->transaction_alias=$request['transaction_alias'];
        $fleetWallet->transaction_desc=$request['transaction_desc'];
        $fleetWallet->type=$request['type'];
        $fleetWallet->amount=$request['amount'];        

        if(empty($fleet->wallet_balance))
            $fleetWallet->open_balance=0;
        else
            $fleetWallet->open_balance=$fleet->wallet_balance;

        if(empty($fleet->wallet_balance))
            $fleetWallet->close_balance=$request['amount'];
        else            
            $fleetWallet->close_balance=$fleet->wallet_balance+($request['amount']);       

        $fleetWallet->save();

        //update the fleet wallet amount to fleet table        
        $fleet->wallet_balance=$fleet->wallet_balance+($request['amount']);
        $fleet->save();

        return true;
    }

    protected function adminCommission($amount,$paymentsRequest,$UserRequest){
        $ipdata=array();    
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.admin_commission');
        $ipdata['transaction_type']=1;
        $ipdata['type']='C';
        $ipdata['amount']=$amount;
        $this->createAdminWallet($ipdata);

        $provider_det_amt= -1 * abs($amount);
        $ipdata=array();
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.admin_commission');
        $ipdata['id']=$paymentsRequest->provider_id;
        $ipdata['type']='D';
        $ipdata['amount']=$provider_det_amt;
        $this->createProviderWallet($ipdata);
    }

    protected function fleetCommission($amount,$paymentsRequest,$UserRequest){

        $ipdata=array();
        $admin_det_amt= -1 * abs($amount);     
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.fleet_debit');
        $ipdata['transaction_type']=7;
        $ipdata['type']='D';
        $ipdata['amount']=$admin_det_amt;
        $this->createAdminWallet($ipdata);

        $ipdata=array();        
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.fleet_add');
        $ipdata['id']=$paymentsRequest->fleet_id;        
        $ipdata['type']='C';
        $ipdata['amount']=$amount;
        $this->createFleetWallet($ipdata);

        $ipdata=array();        
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.fleet_recharge');
        $ipdata['transaction_type']=6;
        $ipdata['type']='C';
        $ipdata['amount']=$amount;
        $this->createAdminWallet($ipdata);       

        return true;
    }

    protected function providerDiscountCredit($amount,$paymentsRequest,$UserRequest){
        $ipdata=array();
        $ad_det_amt= -1 * abs($amount);
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.discount_apply');
        $ipdata['transaction_type']=10;       
        $ipdata['type']='D';
        $ipdata['amount']=$ad_det_amt;
        $this->createAdminWallet($ipdata);

        $ipdata=array();
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.discount_refund');
        $ipdata['id']=$paymentsRequest->provider_id;
        $ipdata['type']='C';
        $ipdata['amount']=$amount;
        $this->createProviderWallet($ipdata);

        $ipdata=array();        
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.discount_recharge');
        $ipdata['transaction_type']=11;
        $ipdata['type']='C';
        $ipdata['amount']=$amount;
        $this->createAdminWallet($ipdata);

        return true;
    }

    protected function taxCredit($amount,$paymentsRequest,$UserRequest){        

        $ipdata=array();
        $ad_det_amt= -1 * abs($amount);
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.tax_credit');
        $ipdata['id']=$paymentsRequest->provider_id;
        $ipdata['type']='D';
        $ipdata['amount']=$ad_det_amt;
        $this->createProviderWallet($ipdata);

        $ipdata=array();        
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;                        
        $ipdata['transaction_desc']=trans('api.transaction.tax_debit');
        $ipdata['transaction_type']=9;
        $ipdata['type']='C';
        $ipdata['amount']=$amount;
        $this->createAdminWallet($ipdata);

        return true;
    }    

    protected function providerRideCredit($amount,$admin_amount,$paymentsRequest,$UserRequest){

        $ipdata=array();
        $ipdata['transaction_id']=$UserRequest->id;
        $ipdata['transaction_alias']=$UserRequest->booking_id;  
        $ipdata['transaction_desc']=trans('api.transaction.provider_credit');        
        $ipdata['id']=$paymentsRequest->provider_id;
        $ipdata['type']='C';
        $ipdata['amount']=$amount;
        $this->createProviderWallet($ipdata);

        if($admin_amount>0){
            $ipdata=array();
            $ipdata['transaction_id']=$UserRequest->id;
            $ipdata['transaction_alias']=$UserRequest->booking_id;                        
            $ipdata['transaction_desc']=trans('api.transaction.provider_recharge');
            $ipdata['transaction_type']=4;                     
            $ipdata['type']='C';
            $ipdata['amount']=$admin_amount;
            $this->createAdminWallet($ipdata);
        }    

        return true;
    }

    public function userCreditDebit($amount,$UserRequest,$type=1){

        if($type==1){
            $msg=trans('api.transaction.user_recharge');           
            $ttype='C';
            $user_data=UserWallet::orderBy('id', 'DESC')->first();
            if(!empty($user_data))
            $transaction_id=$user_data->id+1;
            else
               $transaction_id=1;

            $transaction_alias='URC'.str_pad($transaction_id, 6, 0, STR_PAD_LEFT);

            $user_id=$UserRequest;
            $transaction_type=2;
        }
        else{
            $msg=trans('api.transaction.user_trip');            
            $ttype='D';
            $amount= -1 * abs($amount);
            $transaction_id=$UserRequest->id;
            $transaction_alias=$UserRequest->booking_id;
            $user_id=$UserRequest->user_id;
            $transaction_type=3;
        }           
        
        $ipdata=array();
        $ipdata['transaction_id']=$transaction_id;
        $ipdata['transaction_alias']=$transaction_alias;
        $ipdata['transaction_desc']=$msg;
        $ipdata['id']=$user_id;        
        $ipdata['type']=$ttype;
        $ipdata['amount']=$amount;
        $this->createUserWallet($ipdata);
        
        $ipdata=array();
        $ipdata['transaction_id']=$transaction_id;
        $ipdata['transaction_alias']=$transaction_alias;
        $ipdata['transaction_desc']=$msg;
        $ipdata['transaction_type']=$transaction_type;        
        $ipdata['type']=$ttype;
        $ipdata['amount']=$amount;
        $this->createAdminWallet($ipdata);          

        return true;
    }

    public function wallet_transation(Request $request){        
        try{

           $start_node= $request->start_node;
           $limit= $request->limit;
            
           $wallet_transation = ProviderWallet::where('provider_id',Auth::user()->id);
            if(!empty($limit)){
                $wallet_transation =$wallet_transation->offset($start_node);
                $wallet_transation =$wallet_transation->limit($limit);
            }
            $wallet_transation =$wallet_transation->orderBy('id','desc')->get();

            return response()->json(['wallet_transation' => $wallet_transation,'wallet_balance'=>Auth::user()->wallet_balance]);

        }catch(Exception $e){
            return response()->json(['error' => trans('api.something_went_wrong')]);
        }
        
    }

    public function requestamount(Request $request){

        $premat=WalletRequests::where('from_id',Auth::user()->id)->where('request_from',$request->type)->where('status',0)->sum('amount');

        $available=Auth::user()->wallet_balance-$premat;

        $messsages = array(
            'amount.max'=>trans('api.amount_max').Setting::get('currency','$').$available,
        );
        $this->validate($request, [
                'amount' => 'required|numeric|min:1|max:'.$available,               
            ],$messsages);        
        try{

            $nextid=(new Helper)->generate_request_id($request->type);            
            $amountRequest=new WalletRequests;
            $amountRequest->alias_id=$nextid;
            $amountRequest->request_from=$request->type;          
            $amountRequest->from_id=Auth::user()->id;
            $amountRequest->type='D';
            if(Setting::get('CARD', 0) == 1)
                $amountRequest->send_by='online';
            else
                $amountRequest->send_by='offline';
            $amountRequest->amount=$request->amount;
            $amountRequest->save();
            $fn_response["success"]=trans('api.amount_success');

        }catch(\Illuminate\Database\QueryException $e){
            $fn_response["error"]=$e->getMessage();
             
        }catch(Exception $e){            
            $fn_response["error"]=$e->getMessage();
        }
        
        return response()->json($fn_response);
    }

    public function requestcancel(Request $request){
        
        $this->validate($request, [
                'id' => 'required|numeric',               
            ]);        
        try{
            
            $amountRequest=WalletRequests::find($request->id);
            $amountRequest->status=2;           
            $amountRequest->save();
            $fn_response["success"]=trans('api.amount_cancel');

        }catch(\Illuminate\Database\QueryException $e){
            $fn_response["error"]=$e->getMessage();
             
        }catch(Exception $e){            
            $fn_response["error"]=$e->getMessage();
        }
        
        return response()->json($fn_response);
    }

    public function transferlist(Request $request){

       $start_node= $request->start_node;
       $limit= $request->limit;
        
        $pendinglist = WalletRequests::where('from_id',Auth::user()->id)->where('request_from','provider')->where('status',0);
        if(!empty($limit)){
            $pendinglist =$pendinglist->offset($start_node);
            $pendinglist =$pendinglist->limit($limit);
        }
        $pendinglist =$pendinglist->orderBy('id','desc')->get();

        return response()->json(['pendinglist' => $pendinglist,'wallet_balance'=>Auth::user()->wallet_balance]);
    }

    

    public function settlements($id){

        $request_data = WalletRequests::where('id',$id)->first();

        if($request_data->type=='D'){
            $settle_amt=-1 * $request_data->amount;
            $admin_amt=-1 * abs($request_data->amount);
            $settle_msg='settlement debit';
            $ad_msg='settlement debit';
            $settle_type=$request_data->type;
            $ad_type=$request_data->type;
        }
        else{
            $settle_amt=$request_data->amount;
            $admin_amt=$request_data->amount;
            $settle_msg='settlement credit';
            $ad_msg='settlement credit';
            $settle_type=$request_data->type;
            $ad_type=$request_data->type;
        }

        if($request_data->request_from=='provider'){
            $ipdata=array();
            $ipdata['transaction_id']=$request_data->id;
            $ipdata['transaction_alias']=$request_data->alias_id;
            $ipdata['transaction_desc']=$settle_msg;
            $ipdata['id']=$request_data->from_id;        
            $ipdata['type']=$settle_type;
            $ipdata['amount']=$settle_amt;
            $this->createProviderWallet($ipdata);
            $transaction_type=5;
        }
        else{
            $ipdata=array();        
            $ipdata['transaction_id']=$request_data->id;
            $ipdata['transaction_alias']=$request_data->alias_id;                        
            $ipdata['transaction_desc']=$settle_msg;
            $ipdata['id']=$request_data->from_id;        
            $ipdata['type']=$settle_type;
            $ipdata['amount']=$settle_amt;
            $this->createFleetWallet($ipdata);
            $transaction_type=8;
        }
        
        $ipdata=array();
        $ipdata['transaction_id']=$request_data->id;
        $ipdata['transaction_alias']=$request_data->alias_id;
        $ipdata['transaction_desc']=$ad_msg;
        $ipdata['transaction_type']=$transaction_type;        
        $ipdata['type']=$ad_type;
        $ipdata['amount']=$admin_amt;
        $this->createAdminWallet($ipdata);          

        $request_data->status=1;
        $request_data->save();

        return true;
    }
    


    public function wallet_passbook(Request $request)
    {
        try{

            $start_node= $request->start_node;
            $limit= $request->limit;
            
            $wallet_transation = ProviderWallet::where('provider_id',Auth::user()->id);
            if(!empty($limit)){
                $wallet_transation =$wallet_transation->offset($start_node);
                $wallet_transation =$wallet_transation->limit($limit);
            }

            $wallet_transation =$wallet_transation->orderBy('id','desc')->get();

            return response()->json(['wallet_transation' => $wallet_transation,'wallet_balance'=>Auth::user()->wallet_balance]);

        } catch (Exception $e) {
             return response()->json(['error' => trans('api.something_went_wrong')], 500);
        }
    }

    public function active_check(Request $request)
    {
        try{

            $document = Document::where('doc_required','=','Yes')->pluck('id');
            $provider_document = ProviderDocument::where('provider_id',Auth::user()->id)->whereIn('document_id', $document)->where('expires_at','<',date('Y-m-d'))->count();  

            if(($provider_document > 0)){

                $document_status="disable";

            }else{

                $document_status="active";
                    
            }
       

            $wallet_limit = Setting::get('wallet_limit');
            $Provider = Auth::user();
            $provider_wallet=$Provider->wallet_balance;


            if(($wallet_limit > $provider_wallet)){

                $wallet_status="disable";

            }else{

                $wallet_status="active";
                    
            }


           

            $duration2='+7 day';
            $diffdatedt2 = date('Y-m-d', strtotime($duration2));

            $sevendays_status = ProviderDocument::where('provider_id',Auth::user()->id)->whereIn('document_id', $document)->where('expires_at','<',$diffdatedt2)->where('expires_at','>',date('Y-m-d'))->count();  

            if(($sevendays_status > 0)){

                $sevendays="disable";
            }else{
              
                $sevendays="active";
 
                    
            }

            $Provider = Auth::user();
            $provider = $Provider->status;


            if(($provider == "approved")){

                $provider_status="true";    

            }else if(($provider == "document")){

                $provider_status="true";    

            }else if(($provider == "banned")){

                $provider_status="true";    

            }
            else{

                $provider_status="false"; 
               
            }


            $document_count = Document::count();
            $document_dt = Document::pluck('id');

            $provider_document_count = ProviderDocument::where('provider_id',Auth::user()->id)->whereIn('document_id', $document_dt)->count();  

            if(($document_count == $provider_document_count)){


                $document_check="true";

            }else{

                $document_check="false";
                    
            }


            $Provider_banned = Auth::user();
            $Provider_banned = $Provider_banned->status;


            if(($Provider_banned == "banned")){

                $provider_disable_status="disable";    

            }else{

                $provider_disable_status="enable"; 
               
            }



        
            
            return response()->json(['document_status' => $document_status,'wallet_status' => $wallet_status,'sevendays' => $sevendays,'provider_status' => $provider_status,'document_check' => $document_check,'provider_enable_status' => $provider_disable_status]);

        } catch (Exception $e) {
             return response()->json(['error' => trans('api.something_went_wrong')], 500);
        }
    }

}